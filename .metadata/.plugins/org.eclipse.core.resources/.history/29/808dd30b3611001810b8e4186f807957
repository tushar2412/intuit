package com.ingenu.examples.dataserver.model;

import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.UUID;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.Table;
import javax.persistence.Transient;

@Entity
@Table(name = "Message")
public class Message
{
	private UUID id;
	private long nodeId;
	private Direction direction;
	private String type;
	private long timestamp;
	private byte[] payload;

	public enum Direction
	{
		UPLINK,
		DOWNLINK
	}

	@Id
	@Column(name = "id")
	public UUID getId()
	{
		return id;
	}

	public void setId(UUID id)
	{
		this.id = id;
	}

	@Column(name = "nodeId")
	public long getNodeId()
	{
		return nodeId;
	}

	public void setNodeId(long nodeId)
	{
		this.nodeId = nodeId;
	}

	@Enumerated(EnumType.STRING)
	@Column(name = "direction", nullable = false)
	public Direction getDirection()
	{
		return direction;
	}

	public void setDirection(Direction direction)
	{
		this.direction = direction;
	}

	@Column(name = "type")
	public String getType()
	{
		return type;
	}

	public void setType(String type)
	{
		this.type = type;
	}

	@Column(name = "timestamp")
	public long getTimestamp()
	{
		return timestamp;
	}

	public void setTimestamp(long timestamp)
	{
		this.timestamp = timestamp;
	}

	@Lob
	@Column(name = "payload")
	public byte[] getPayload()
	{
		return payload;
	}

	public void setPayload(byte[] payload)
	{
		this.payload = payload;
	}

	@Transient
	public String getNodeIdAsHex()
	{
		return "0x" + Long.toHexString(this.getNodeId());
	}

	@Transient
	public String getPayloadAsJson() throws UnsupportedEncodingException
	{
		return new String(this.getPayload(), "UTF-8");
	}
	
	@Transient
	public String getTimestampFormatted()
	{
		return new Date(this.getTimestamp()).toString();
	}

	@Override
	public int hashCode()
	{
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof Message))
			return false;
		Message other = (Message) obj;
		if (id == null)
		{
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

}
